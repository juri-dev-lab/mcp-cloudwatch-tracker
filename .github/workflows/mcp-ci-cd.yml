name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  ECR_REPOSITORY: dev-labs/mcp-server
  IMAGE_TAG: cloudwatch-tracker

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          registry-url: "https://npm.pkg.github.com"
          scope: "@Juri-Dev-Lab"

      - name: Install dependencies
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.JURI_PERSONAL_GITHUB_TOKEN }}

      - name: Run tests
        run: npm test

      - name: Run linting
        run: npm run lint

      - name: Build package
        run: npm run build

      - name: Create .env file
        run: echo "${{ secrets.ENV_LIVE }}" > .env

  publish-npm:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          registry-url: "https://npm.pkg.github.com"
          scope: "@Juri-Dev-Lab"

      - name: Install dependencies
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ${{ secrets.JURI_PERSONAL_GITHUB_TOKEN }}

      - name: 고유 버전 생성
        id: generate_version
        run: |
          # 기본 버전 가져오기 (예: 1.0)
          BASE_VERSION=$(node -p "require('./package.json').version.split('.').slice(0, 2).join('.')")
          # GitHub 실행 번호와 타임스탬프를 사용하여 고유 버전 생성
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          UNIQUE_VERSION="${BASE_VERSION}.${{ github.run_number }}-${TIMESTAMP}"
          echo "Generated version: ${UNIQUE_VERSION}"
          echo "version=${UNIQUE_VERSION}" >> $GITHUB_OUTPUT
          npm version --no-git-tag-version "${UNIQUE_VERSION}"

      - name: Build package
        run: npm run build

      - name: Publish to GitHub Packages
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.JURI_PERSONAL_GITHUB_TOKEN }} #repo, package:read, package:write

  publish-docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          registry-url: "https://npm.pkg.github.com"
          scope: "@Juri-Dev-Lab"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 임시 런타임 디렉토리에 토큰 파일 생성
      - name: Create npmrc file
        run: |
          cat > .npmrc << EOF
          @juri-dev-lab:registry=https://npm.pkg.github.com/
          //npm.pkg.github.com/:_authToken=${{ secrets.JURI_PERSONAL_GITHUB_TOKEN }}
          EOF
          cat .npmrc | sed 's/_authToken=.*/_authToken=***/'

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            devthorjuri/mcp-cloudwatch-tracker:latest
            devthorjuri/mcp-cloudwatch-tracker:${{ github.sha }}
          secret-files: |
            "npmrc=.npmrc"
